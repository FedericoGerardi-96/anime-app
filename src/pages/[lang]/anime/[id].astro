---
import { Image } from 'astro:assets';
import { actions } from 'astro:actions';

import AnimeDetailCard from '@/components/anime/AnimeDetailCard.astro';
import AnimeDetailLayout from '@/layouts/AnimeDetailLayout.astro';
import { getLangFromUrl, useTranslations } from '@/i18n/utils';
import Synopsis from '@/components/anime/Synopsis';
import DEFAULT_IMAGE from '@/assets/images/Kallen-Stadtfeld.avif';

const url = new URL(Astro.request.url);
const lang = getLangFromUrl(url);
const t = useTranslations(lang);
const idAnime = Astro.params.id;

if (!idAnime) {
  throw new Error("Anime ID can't be empty");
}

const { data, error } = await actions.GetAnimeById({ idAnime: +idAnime });

if (error) {
  throw new Error(error.message);
}

const {
  data: {
    mal_id,
    title,
    title_english: titleEnglish,
    title_japanese: titleJapanese,
    synopsis,
    images: {
      jpg: { image_url: imageUrl },
    },
    trailer: {
      images: { maximum_image_url: trailerImageUrl },
    },
    trailer: { embed_url: trailerUrl },
  },
} = data;

const hasTrailer = trailerImageUrl || (trailerImageUrl && !trailerImageUrl.includes('maxresdefault'));
---

<AnimeDetailLayout title={`Anime - ${title}`}>
  <section id='anime-detail' class='h-full pb-20'>
    <div class='relative w-full h-96'>
      <button
        onclick='history.back()'
        class='absolute top-7 left-7 mb-4 inline-flex text-3xl items-center text-white hover:text-yellow-400 transition-colors z-30'>
        {t('anime.backText')}
      </button>
      {
        hasTrailer ? (
          <Image
            width={1}
            height={384}
            draggable='false'
            src={trailerImageUrl}
            alt={title}
            class='object-cover w-full h-96 object-center'
          />
        ) : (
          <Image
            width={DEFAULT_IMAGE.width}
            height={DEFAULT_IMAGE.height}
            draggable='false'
            src={DEFAULT_IMAGE}
            alt={title}
            class='object-cover w-full h-96 object-center'
          />
        )
      }
      <div class='w-full h-full absolute top-0 left-0 bg-[rgba(0,0,0,.6)] z-20'></div>
    </div>
    <div class='flex flex-col-reverse items-center xl:items-start xl:grid xl:grid-cols-[1fr,300px] gap-4 px-10'>
      <div class='flex flex-col justify-between py-4 mt-28 xl:mt-0'>
        <div>
          <h1 class='text-5xl xl:text-6xl mb-2'>{title} <span class='text-primary'>â€¢</span></h1>
          {titleEnglish && <p class='text-gray-600 text-xl lg:text-2xl font-ubuntu'>{titleEnglish}</p>}
          {titleJapanese && <p class='text-gray-600 text-xl lg:text-2xl  italic'>{titleJapanese}</p>}
        </div>
        <div class='mt-8 2xl:block hidden'>
          <AnimeDetailCard animeDetail={data} />
        </div>
      </div>
      <div class='aspect-w-3 aspect-h-4 relative !w-[300px] h-auto xl:!h-[400px]'>
        <Image
          transition:name={`${mal_id}-anime`}
          draggable='false'
          src={imageUrl}
          alt={title}
          class='absolute object-cover rounded-lg shadow-lg -top-72 xl:-top-16 z-40 !w-[300px] !h-[400px]'
          width={300}
          height={400}
        />
      </div>
    </div>
    <div class='px-10'>
      <div class='2xl:hidden block'>
        <AnimeDetailCard animeDetail={data} />
      </div>
      <Synopsis idButton='synopsisDown' idContainer='btnDown' client:only='react' synopsis={synopsis} />

      <!-- {
          trailerUrl && (
            <div class='mt-4'>
              <iframe src={trailerUrl} title='Trailer' class='w-full aspect-video rounded-lg' allowfullscreen />
            </div>
          )
        } -->
    </div>
  </section>
</AnimeDetailLayout>
